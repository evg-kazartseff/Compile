%option noyywrap yylineno

%{
#include "../inc/Ast.h"
#include "../inc/parser.h"
    int ch = 1;
    HashTable* hash_table = Singleton<HashTable>::getInstance();
%}

DIGIT[0-9]
LETTER[a-zA-Z]
DELIM[();{,:]
WS[ \t]
ID ("_"|{LETTER})("_"|{LETTER}|{DIGIT})*
OP [-+*/|%&]
LOP [<>=!~]
SIGN [-+]

%%

"\n" {
    ch = 1;
}

"//".*('\n'|$) {
    ch += yyleng;
}

\".*\" {
    ch += yyleng;
    yylval.str = strdup(yytext);
    return STRING;
}

{OP}"=" {
    ch += yyleng;
    yylval.type = *yytext;
    hash_table->addChildScope();
    return OPME;
}


"++" {
    ch += yyleng;
    return INC;
}

"--" {
    ch += yyleng;
    return DEC;
}

"==" {
    ch += yyleng;
    return EQ;
}

"!=" {
    ch += yyleng;
    return NEQ;
}

"&&" {
    ch += yyleng;
    return AND;
}


">=" {
    ch += yyleng;
    return GEQ;
}

"<=" {
    ch += yyleng;
    return LEQ;
}

"if" {
    ch += yyleng;
    hash_table->addChildScope();

    return IF;
}

"else" {
    ch += yyleng;
    hash_table->closeScope();
    hash_table->addChildScope();
    return ELSE;
}

"for" {
    hash_table->addChildScope();
    ch += yyleng;
    return FOR;
}

"}" {
    ch += yyleng;
    hash_table->closeScope();
    return '}';
}

"function" {
    ch += yyleng;
    return FUNCTION;

}

"int" {
    ch += yyleng;
    yylval.type = INT;
    return INT;
}

"void" {
    ch += yyleng;
    yylval.type = VOID;
    return VOID;
}

"goto" {
    ch += yyleng;
    return JUMP;
}

"return" {
    ch += yyleng;
    return RETURN;
 }

{SIGN}?{DIGIT}+ {
    ch += yyleng;
    yylval.str = strdup(yytext);
    return CONST_INT;
}

{ID} {
    yylval.str = strdup(yytext);
    ch += yyleng;
    return ID;
}

{DELIM} {
    ch += yyleng;
    return *yytext;
}

{WS}+ {
    ch += yyleng;
}

{OP} {
    ch += yyleng;
    return *yytext;
}

{LOP} {
    ch += yyleng;
    return *yytext;
}

. {
    printf("Unknown character (%d, %d): %s\n", yylineno, ch, yytext);
    ch += yyleng;
    return LEX_ERROR;
}
%%